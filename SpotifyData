# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM Spotifydata
GROUP BY artist_name, track_name

S#Then i determined which artists tracks had the highest danceability
SELECT artist_name, track_name, danceability 
FROM Spotifydata
ORDER BY danceability desc;


#Then I checked for the highest average popularity by artist
SELECT artist_name, AVG(popularity) AS avg_popularity
FROM Spotifydata
GROUP BY artist_name
ORDER BY avg_popularity DESC
LIMIT 10;


#Then I determined how much speechiness, or lyrics, had to do with the track popularity
SELECT speechiness, AVG(popularity) AS avg_popularity
FROM Spotifydata
GROUP BY speechiness
ORDER BY speechiness DESC;

#I also checked to see if variation in music, or tempo range, had an effect o artist popularity
SELECT artist_name, MAX(tempo) - MIN(tempo) AS tempo_range, AVG(popularity) AS avg_popularity
FROM Spotifydata
GROUP BY artist_name
ORDER BY tempo_range DESC;

#Lastly, i checked to see if acoustics had an effect on popularity ranking
SELECT track_name, popularity, acousticness
FROM Spotifydata
WHERE acousticness >= 0.7
ORDER BY popularity DESC
LIMIT 10;
